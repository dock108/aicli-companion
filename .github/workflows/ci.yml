name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Global permissions for the workflow
permissions:
  contents: read
  actions: read
  checks: write
  issues: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '22'
  XCODE_VERSION: '16.2'
  IOS_SIMULATOR: 'iPhone 16 Pro'  # Updated for Xcode 16.2
  MINIMUM_COVERAGE: 80  # Minimum code coverage percentage

jobs:
  # Node.js Server Tests and Linting
  server:
    name: Server Tests & Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    timeout-minutes: 15
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check code formatting
      run: npm run format:check
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Check Server Coverage Threshold
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          coverage=$(node -e "const cov = require('./coverage/coverage-summary.json'); const total = cov.total; const avg = (total.lines.pct + total.statements.pct + total.functions.pct + total.branches.pct) / 4; console.log(avg.toFixed(1));")
          echo "Code coverage: ${coverage}%"
          if (( $(echo "$coverage < ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
            echo "❌ Coverage ${coverage}% is below minimum threshold of ${{ env.MINIMUM_COVERAGE }}%"
            exit 1
          else
            echo "✅ Coverage ${coverage}% meets minimum threshold"
          fi
        else
          echo "❌ Coverage report not found"
          exit 1
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: server-coverage
        path: server/coverage/
    
    - name: Security audit
      run: npm audit --audit-level=high

  # iOS App Build and Tests
  ios:
    name: iOS Build & Test
    permissions:
      contents: read
      checks: write
    runs-on: macos-15
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift', '**/*.h', '**/*.m') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: |
        cd ios
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Resolve Swift Package Dependencies
      run: |
        cd ios
        xcodebuild -resolvePackageDependencies -project AICLICompanion.xcodeproj -scheme AICLICompanion
    
    - name: Build iOS App
      run: |
        cd ios
        xcodebuild -project AICLICompanion.xcodeproj \
          -scheme AICLICompanion \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          build \
          CODE_SIGNING_ALLOWED=NO
    
    # - name: Run iOS Tests with Coverage
    #   run: |
    #     cd ios
    #     xcodebuild -project AICLICompanion.xcodeproj \
    #       -scheme AICLICompanion \
    #       -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
    #       test \
    #       -enableCodeCoverage YES \
    #       CODE_SIGNING_ALLOWED=NO \
    #       -resultBundlePath ios-test.xcresult \
    #       -parallel-testing-enabled NO \
    #       -maximum-concurrent-test-simulator-destinations 1 \
    #       IDEBuildOperationMaxNumberOfConcurrentCompileTasks=4
    
    # - name: Generate iOS Coverage Report
    #   run: |
    #     cd ios
    #     xcrun xccov view --report --json ios-test.xcresult > ios-coverage.json || true
    #     xcrun xccov view --report ios-test.xcresult > ios-coverage.txt || true
    
    # - name: Check iOS Coverage Threshold
    #   run: |
    #     cd ios
    #     if [ -f ios-coverage.json ]; then
    #       coverage=$(cat ios-coverage.json | python3 -c "import json, sys; data = json.load(sys.stdin); coverage = data['targets'][0].get('lineCoverage', 0) * 100 if 'targets' in data and len(data['targets']) > 0 else 0; print(f'{coverage:.1f}')")
    #       echo "Code coverage: ${coverage}%"
    #       if (( $(echo "$coverage < ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
    #         echo "❌ Coverage ${coverage}% is below minimum threshold of ${{ env.MINIMUM_COVERAGE }}%"
    #         exit 1
    #       else
    #         echo "✅ Coverage ${coverage}% meets minimum threshold"
    #       fi
    #     fi
    - name: Upload iOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: ios-coverage
        path: |
          ios/ios-coverage.json
          ios/ios-coverage.txt
      if: always()

  # macOS App Build and Tests
  macos:
    name: macOS Build & Test
    permissions:
      contents: read
      checks: write
    runs-on: macos-15
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          ~/.swiftpm
        key: ${{ runner.os }}-macos-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-macos-spm-
    
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-macos-derived-${{ hashFiles('**/*.swift', '**/*.h', '**/*.m') }}
        restore-keys: |
          ${{ runner.os }}-macos-derived-
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: |
        cd macos-app/AICLICompanionHost
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Resolve macOS Dependencies
      run: |
        cd macos-app
        # Check if Package.swift exists for SPM
        if [ -f Package.swift ]; then
          swift package resolve
        fi
    
    - name: Build macOS App
      run: |
        cd macos-app
        xcodebuild -project AICLICompanionHost.xcodeproj \
          -scheme AICLICompanionHost \
          -destination 'platform=macOS' \
          build \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run macOS Tests with Coverage
      run: |
        cd macos-app
        xcodebuild -project AICLICompanionHost.xcodeproj \
          -scheme AICLICompanionHost \
          -destination 'platform=macOS' \
          test \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          -resultBundlePath macos-test.xcresult
    
    - name: Generate macOS Coverage Report
      run: |
        cd macos-app
        xcrun xccov view --report --json macos-test.xcresult > macos-coverage.json || true
        xcrun xccov view --report macos-test.xcresult > macos-coverage.txt || true
    
    - name: Check macOS Coverage Threshold
      run: |
        cd macos-app
        if [ -f macos-coverage.json ]; then
          coverage=$(cat macos-coverage.json | python3 -c "import json, sys; data = json.load(sys.stdin); coverage = data['targets'][0].get('lineCoverage', 0) * 100 if 'targets' in data and len(data['targets']) > 0 else 0; print(f'{coverage:.1f}')")
          echo "Code coverage: ${coverage}%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "❌ Coverage ${coverage}% is below minimum threshold of 80%"
            exit 1
          else
            echo "✅ Coverage ${coverage}% meets minimum threshold"
          fi
        fi
    
    - name: Upload macOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: macos-coverage
        path: |
          macos-app/macos-coverage.json
          macos-app/macos-coverage.txt
      if: always()

  # Summary and Status Report
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [server, ios, macos]
    if: always()
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      continue-on-error: true
    
    - name: Generate Summary Report
      run: |
        echo "## 📊 CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        echo "### Job Status" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.server.result }}" == "success" ]; then
          echo "| 🖥️ Server | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🖥️ Server | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.ios.result }}" == "success" ]; then
          echo "| 📱 iOS | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📱 iOS | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.macos.result }}" == "success" ]; then
          echo "| 💻 macOS | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 💻 macOS | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version:** ${{ env.XCODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **iOS Simulator:** ${{ env.IOS_SIMULATOR }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum Coverage:** ${{ env.MINIMUM_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.server.result }}" == "success" ] && [ "${{ needs.ios.result }}" == "success" ] && [ "${{ needs.macos.result }}" == "success" ]; then
          echo "### ✅ All Checks Passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Some Checks Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed jobs above for details." >> $GITHUB_STEP_SUMMARY
        fi
