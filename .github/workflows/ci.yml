name: CI

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency fixes only)'
        required: false
        type: boolean
        default: false

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global permissions for the workflow
permissions:
  contents: read
  actions: read
  checks: write
  issues: write
  pull-requests: write
  security-events: write
  statuses: write

env:
  NODE_VERSION: '22'
  XCODE_VERSION: '15.4'  # Use Xcode 15.4 (available on macos-14)
  SWIFT_VERSION: '5.9'
  MINIMUM_COVERAGE: 80  # Minimum code coverage percentage
  MINIMUM_IOS_COVERAGE: 70  # Lower for iOS due to UI code
  MINIMUM_MACOS_COVERAGE: 70
  BUILD_CONFIGURATION: 'Release'
  ENABLE_TESTABILITY: 'YES'
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  # ============================================================================
  # Code Quality & Change Detection
  # ============================================================================
  
  code-quality:
    name: Code Quality & Change Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      server_changed: ${{ steps.changes.outputs.server }}
      ios_changed: ${{ steps.changes.outputs.ios }}
      macos_changed: ${{ steps.changes.outputs.macos }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better change detection
    
    - name: Detect changed files
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          server:
            - 'server/**'
            - 'package*.json'
          ios:
            - 'ios/**'
            - '*.xcodeproj/**'
            - '*.xcworkspace/**'
          macos:
            - 'macos-app/**'
            - '*.xcodeproj/**'
            - '*.xcworkspace/**'
          docs:
            - '**/*.md'
            - 'docs/**'
          ci:
            - '.github/workflows/**'
    
    
    - name: Run Markdown lint
      uses: DavidAnson/markdownlint-cli2-action@v14
      with:
        globs: '**/*.md'
      continue-on-error: true

  # ============================================================================
  # Node.js Server Tests and Linting
  # ============================================================================
  
  server:
    name: Server Tests & Lint (Node ${{ matrix.node-version }})
    needs: code-quality
    if: needs.code-quality.outputs.server_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    timeout-minutes: 45
    
    strategy:
      matrix:
        node-version: ['22']  # Test on multiple Node versions
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run ESLint
      run: |
        npm run lint -- --format=json --output-file=../eslint-report-${{ matrix.node-version }}.json || true
        npm run lint
    
    - name: Check code formatting
      run: npm run format:check
    
    - name: Run type checking
      run: npx tsc --noEmit
      if: hashFiles('server/tsconfig.json') != ''
      continue-on-error: true
    
    - name: Run tests with coverage
      run: npm run test:coverage -- --reporter=json --reporter=lcov --reporter=text
    
    - name: Run integration tests
      run: npm run test:integration || echo "No integration tests configured"
      continue-on-error: true
    
    
    - name: Check Server Coverage Threshold
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          coverage=$(node -e "const cov = require('./coverage/coverage-summary.json'); const total = cov.total; const avg = (total.lines.pct + total.statements.pct + total.functions.pct + total.branches.pct) / 4; console.log(avg.toFixed(1));")
          echo "::notice title=Coverage::Server coverage (Node ${{ matrix.node-version }}) is ${coverage}%"
          if (( $(echo "$coverage < ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
            echo "::error::Coverage ${coverage}% is below minimum threshold of ${{ env.MINIMUM_COVERAGE }}%"
            exit 1
          else
            echo "✅ Coverage ${coverage}% meets minimum threshold"
          fi
        else
          echo "::error::Coverage report not found"
          exit 1
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: server-coverage-node-${{ matrix.node-version }}
        path: server/coverage/
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
    
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report-node-${{ matrix.node-version }}
        path: eslint-report-${{ matrix.node-version }}.json
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      if: always()
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # ============================================================================
  # iOS App Build and Tests
  # ============================================================================
  
  ios:
    name: iOS Build & Test
    needs: code-quality
    if: needs.code-quality.outputs.ios_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    permissions:
      contents: read
      checks: write
    runs-on: macos-14
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: |
        # List available Xcode versions and select the appropriate one
        echo "=== Available Xcode versions ==="
        ls -la /Applications/ | grep Xcode || true
        
        # Try to use Xcode 15.4, fall back to latest if not available
        if [ -d "/Applications/Xcode_15.4.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.4.app
        elif [ -d "/Applications/Xcode_15.2.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.2.app
        elif [ -d "/Applications/Xcode_15.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.0.app
        else
          # Use the latest available version
          LATEST_XCODE=$(ls -d /Applications/Xcode*.app 2>/dev/null | sort -V | tail -n1)
          echo "Using latest Xcode: $LATEST_XCODE"
          sudo xcode-select -s "$LATEST_XCODE"
        fi
        xcodebuild -version
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/.swiftpm
          ios/build/SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles('ios/Package.resolved', 'ios/Package.swift') }}-${{ env.XCODE_VERSION }}-v3
        restore-keys: |
          ${{ runner.os }}-spm-${{ hashFiles('ios/Package.resolved') }}-${{ env.XCODE_VERSION }}
          ${{ runner.os }}-spm-${{ hashFiles('ios/Package.resolved') }}
    
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ios/build
        key: ${{ runner.os }}-ios-build-${{ hashFiles('ios/**/*.swift', 'ios/Package.resolved') }}-v2
        restore-keys: |
          ${{ runner.os }}-ios-build-${{ hashFiles('ios/Package.resolved') }}
    
    - name: Cache SwiftLint
      uses: actions/cache@v4
      with:
        path: ~/.swiftlint
        key: ${{ runner.os }}-swiftlint-${{ env.XCODE_VERSION }}
    
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
    
    - name: Run SwiftLint
      run: |
        cd ios
        swiftlint lint --strict --reporter json > ../swiftlint-ios.json || true
        swiftlint lint --strict --reporter github-actions-logging
        if [ $? -ne 0 ]; then
          echo "❌ SwiftLint found violations"
          exit 1
        fi
    
    - name: Upload SwiftLint report
      uses: actions/upload-artifact@v4
      with:
        name: swiftlint-ios-report
        path: swiftlint-ios.json
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      if: always()
    
    # Skip iOS simulator installation - just build for generic device
    # This avoids downloading GBs of simulator runtime data
    
    - name: Clean build and reset package cache
      run: |
        cd ios
        # Clean any previous builds and derived data
        xcodebuild clean -scheme AICLICompanion -destination 'generic/platform=iOS' || true
        # Remove problematic build artifacts
        rm -rf build/SourcePackages || true
        rm -rf .build || true
        # Clear Xcode derived data that might conflict
        rm -rf ~/Library/Developer/Xcode/DerivedData/AICLICompanion* || true
        # Reset package cache to force fresh resolution
        swift package reset
        swift package resolve
        # Verify packages resolved correctly
        swift package show-dependencies
    
    - name: Check Available SDKs and Destinations
      run: |
        echo "=== Available SDKs ==="
        xcodebuild -showsdks || true
        echo ""
        echo "=== Available destinations for AICLICompanion ==="
        cd ios
        xcodebuild -showdestinations -project AICLICompanion.xcodeproj -scheme AICLICompanion 2>&1 || true
        echo ""
        echo "=== Available build destinations ==="
        xcodebuild -showBuildSettings -project AICLICompanion.xcodeproj -scheme AICLICompanion | grep -i platform || true
        
    - name: Early Swift Package Resolution
      run: |
        cd ios
        # Clean up any existing checkouts that might be in a bad state
        rm -rf .build/checkouts || true
        swift package resolve
        swift package show-dependencies
        # Verify package integrity
        swift package dump-package > /dev/null
    
    - name: Resolve Swift Package Dependencies
      run: |
        cd ios
        # Resolve packages using xcodebuild with explicit cleanup
        xcodebuild -resolvePackageDependencies \
          -project AICLICompanion.xcodeproj \
          -scheme AICLICompanion \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -clonedSourcePackagesDirPath build/SourcePackages
    
    - name: List Available Simulators
      run: |
        echo "=== Available Simulators ==="
        xcrun simctl list devices available
        
    - name: Pre-build Heavy Dependencies
      run: |
        cd ios
        # Pre-build just the dependencies that are causing timeouts
        xcodebuild build-for-testing \
          -project AICLICompanion.xcodeproj \
          -scheme AICLICompanion \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          IDEBuildOperationMaxNumberOfConcurrentCompileTasks=8 \
          -derivedDataPath build \
          -clonedSourcePackagesDirPath build/SourcePackages \
          -skipPackageSignatureValidation \
          -quiet
      timeout-minutes: 25
    
    - name: Build iOS App
      run: |
        cd ios
        # Use iOS Simulator explicitly instead of generic platform
        xcodebuild build \
          -project AICLICompanion.xcodeproj \
          -scheme AICLICompanion \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          IDEBuildOperationMaxNumberOfConcurrentCompileTasks=8 \
          SWIFT_COMPILATION_MODE=wholemodule \
          -derivedDataPath build \
          -clonedSourcePackagesDirPath build/SourcePackages \
          -skipPackageSignatureValidation
    
    - name: Run iOS Tests with Coverage
      run: |
        cd ios
        # Use consistent destination for tests
        xcodebuild -project AICLICompanion.xcodeproj \
          -scheme AICLICompanion \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          test \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          -resultBundlePath ios-test.xcresult \
          -parallel-testing-enabled NO \
          -maximum-concurrent-test-simulator-destinations 1 \
          IDEBuildOperationMaxNumberOfConcurrentCompileTasks=8 \
          ONLY_ACTIVE_ARCH=NO \
          -derivedDataPath build \
          -clonedSourcePackagesDirPath build/SourcePackages \
          -skip-testing:AICLICompanionTests/KeychainManagerTests \
          -skip-testing:AICLICompanionTests/ConnectionReliabilityManagerTests/testExponentialBackoffProgression \
          -skip-testing:AICLICompanionTests/ConnectionReliabilityManagerTests/testHandleConnectionLost \
          -skip-testing:AICLICompanionTests/ConnectionReliabilityManagerTests/testRecordDisconnection \
          -skip-testing:AICLICompanionTests/MessageQueueManagerTests/testInitialState \
          -skip-testing:AICLICompanionTests/MessageQueueManagerTests/testTrackQueuedMessage \
          -skip-testing:AICLICompanionTests/MessageQueueManagerTests/testConcurrentQueueOperations \
          -skip-testing:AICLICompanionTests/MessageQueueManagerTests/testConcurrentDeliveryOperations \
          -skip-testing:AICLICompanionTests/LoggingManagerTests/testConcurrentLogging \
          -skip-testing:AICLICompanionTests/WebSocketManagerTests/testConcurrentMessageProcessing \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testPerformanceOfManualConfigCreation \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testPerformanceOfServerCreation \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testRefreshDiscoveryBasic \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testStartDiscoveryBasic \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testStopDiscoveryBasic \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testDiscoveryLifecycleBasic \
          -skip-testing:AICLICompanionTests/ServiceDiscoveryManagerTests/testDiscoveryCleanup \
          -skip-testing:AICLICompanionTests/WebSocketManagerTests/testPerformanceOfMessageSerialization
    
    - name: Generate iOS Coverage Report
      run: |
        cd ios
        if [ -d "ios-test.xcresult" ]; then
          xcrun xccov view --report --json ios-test.xcresult > ios-coverage.json || true
          xcrun xccov view --report ios-test.xcresult > ios-coverage.txt || true
        else
          echo "No test results found, skipping coverage report generation"
        fi
    
    # - name: Check iOS Coverage Threshold
    #   run: |
    #     cd ios
    #     if [ -f ios-coverage.json ]; then
    #       coverage=$(cat ios-coverage.json | python3 -c "import json, sys; data = json.load(sys.stdin); coverage = data['targets'][0].get('lineCoverage', 0) * 100 if 'targets' in data and len(data['targets']) > 0 else 0; print(f'{coverage:.1f}')")
    #       echo "Code coverage: ${coverage}%"
    #       if (( $(echo "$coverage < ${{ env.MINIMUM_IOS_COVERAGE }}" | bc -l) )); then
    #         echo "❌ Coverage ${coverage}% is below minimum threshold of ${{ env.MINIMUM_IOS_COVERAGE }}%"
    #         exit 1
    #       else
    #         echo "✅ Coverage ${coverage}% meets minimum threshold"
    #       fi
    #     else
    #       echo "⚠️ No coverage report found (tests may have been skipped)"
    #     fi

    - name: Upload iOS Test Results
      uses: actions/upload-artifact@v4
      with:
        name: ios-test-results
        path: ios/ios-test.xcresult
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      if: always()
    
    - name: Upload iOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: ios-coverage
        path: |
          ios/ios-coverage.json
          ios/ios-coverage.txt
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      if: always()

  # ============================================================================
  # macOS App Build and Tests
  # ============================================================================
  
  macos:
    name: macOS Build & Test
    needs: code-quality
    if: needs.code-quality.outputs.macos_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    permissions:
      contents: read
      checks: write
    runs-on: macos-15
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: |
        # For macOS-15, Xcode 16.0 should be available
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app
        elif [ -d "/Applications/Xcode_16.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.app
        else
          # Use the latest available version
          LATEST_XCODE=$(ls -d /Applications/Xcode*.app 2>/dev/null | sort -V | tail -n1)
          echo "Using latest Xcode: $LATEST_XCODE"
          sudo xcode-select -s "$LATEST_XCODE"
        fi
        xcodebuild -version
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          ~/.swiftpm
        key: ${{ runner.os }}-macos-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-macos-spm-
    
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-macos-derived-${{ hashFiles('**/*.swift', '**/*.h', '**/*.m') }}
        restore-keys: |
          ${{ runner.os }}-macos-derived-
    
    - name: Cache SwiftLint
      uses: actions/cache@v4
      with:
        path: ~/.swiftlint
        key: ${{ runner.os }}-swiftlint-macos-${{ env.XCODE_VERSION }}
    
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
    
    - name: Run SwiftLint
      run: |
        cd macos-app/AICLICompanionHost
        swiftlint lint --strict --reporter json > ../../swiftlint-macos.json || true
        swiftlint lint --strict --reporter github-actions-logging || exit 0
    
    - name: Upload SwiftLint report
      uses: actions/upload-artifact@v4
      with:
        name: swiftlint-macos-report
        path: swiftlint-macos.json
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      if: always()
    
    - name: Resolve macOS Dependencies
      run: |
        cd macos-app
        # Check if Package.swift exists for SPM
        if [ -f Package.swift ]; then
          swift package resolve
        fi
    
    - name: Build macOS App
      run: |
        cd macos-app
        xcodebuild -project AICLICompanionHost.xcodeproj \
          -scheme AICLICompanionHost \
          -destination 'platform=macOS' \
          build \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run macOS Tests with Coverage
      run: |
        cd macos-app
        xcodebuild -project AICLICompanionHost.xcodeproj \
          -scheme AICLICompanionHost \
          -destination 'platform=macOS' \
          test \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO \
          -resultBundlePath macos-test.xcresult \
          -skip-testing:AICLICompanionHostTests/SettingsViewTests \
          -skip-testing:AICLICompanionHostTests/SettingsViewModelTests \
          -skip-testing:AICLICompanionHostTests/SecuritySettingsViewTests \
          -skip-testing:AICLICompanionHostTests/SecuritySettingsViewModelTests \
          -skip-testing:AICLICompanionHostTests/ServerManagerLoggingTests \
          -skip-testing:AICLICompanionHostTests/ServerManagerNetworkingTests \
          -skip-testing:AICLICompanionHostTests/ServerManagerProcessTests \
          -skip-testing:AICLICompanionHostTests/ServerManagerProductionTests \
          -skip-testing:AICLICompanionHostTests/MenuBarViewModelTests \
          -skip-testing:AICLICompanionHostTests/MenuBarViewTests
    
    - name: Generate macOS Coverage Report
      run: |
        cd macos-app
        xcrun xccov view --report --json macos-test.xcresult > macos-coverage.json || true
        xcrun xccov view --report macos-test.xcresult > macos-coverage.txt || true
    
    # - name: Check macOS Coverage Threshold
    #   run: |
    #     cd macos-app
    #     if [ -f macos-coverage.json ]; then
    #       coverage=$(cat macos-coverage.json | python3 -c "import json, sys; data = json.load(sys.stdin); coverage = data['targets'][0].get('lineCoverage', 0) * 100 if 'targets' in data and len(data['targets']) > 0 else 0; print(f'{coverage:.1f}')")
    #       echo "::notice title=macOS Coverage::Coverage is ${coverage}%"
    #       if (( $(echo "$coverage < ${{ env.MINIMUM_MACOS_COVERAGE }}" | bc -l) )); then
    #         echo "::warning::Coverage ${coverage}% is below minimum threshold of ${{ env.MINIMUM_MACOS_COVERAGE }}%"
    #         # Don't fail on coverage for now due to test issues
    #         # exit 1
    #       else
    #         echo "✅ Coverage ${coverage}% meets minimum threshold"
    #       fi
    #     fi
    
    - name: Upload macOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: macos-coverage
        path: |
          macos-app/macos-coverage.json
          macos-app/macos-coverage.txt
      if: always()

  # ============================================================================
  # Test Reporting & Summary
  # ============================================================================
  
  test-report:
    name: Test Report
    needs: [server, ios, macos]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      continue-on-error: true
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          artifacts/**/*.xml
          artifacts/**/*.xcresult
        check_name: 'Test Results'
        comment_mode: off
      continue-on-error: true
    
    - name: Generate coverage summary
      run: |
        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Parse server coverage
        for node_version in 20 22; do
          if [ -f "artifacts/server-coverage-node-${node_version}/coverage-summary.json" ]; then
            coverage=$(node -e "const cov = require('./artifacts/server-coverage-node-${node_version}/coverage-summary.json'); const total = cov.total; const avg = (total.lines.pct + total.statements.pct + total.functions.pct + total.branches.pct) / 4; console.log(avg.toFixed(1));" 2>/dev/null || echo "N/A")
            if [ "$coverage" != "N/A" ]; then
              status="✅"
              if (( $(echo "$coverage < ${{ env.MINIMUM_COVERAGE }}" | bc -l 2>/dev/null || echo 0) )); then
                status="⚠️"
              fi
              echo "| Server (Node ${node_version}) | ${coverage}% | ${status} |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, server, ios, macos, test-report]
    if: always()
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Check overall status
      id: status
      run: |
        if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        elif [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]; then
          echo "status=cancelled" >> $GITHUB_OUTPUT
          echo "emoji=⚠️" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate Summary Report
      run: |
        echo "# ${{ steps.status.outputs.emoji }} CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📈 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Server Tests | ${{ needs.server.result == 'success' && '✅' || needs.server.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| iOS Build | ${{ needs.ios.result == 'success' && '✅' || needs.ios.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS Build | ${{ needs.macos.result == 'success' && '✅' || needs.macos.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version:** ${{ env.XCODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Swift Version:** ${{ env.SWIFT_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum Coverage:** ${{ env.MINIMUM_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📝 Notes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.status.outputs.status }}" = "success" ]; then
          echo "### ✅ All Checks Passed!" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.status.outputs.status }}" = "cancelled" ]; then
          echo "### ⚠️ Pipeline Cancelled" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Some Checks Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed jobs above for details." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Set final status
      if: always()
      run: |
        if [ "${{ steps.status.outputs.status }}" = "failure" ]; then
          echo "::error::CI Pipeline failed. Check the summary for details."
          exit 1
        elif [ "${{ steps.status.outputs.status }}" = "cancelled" ]; then
          echo "::warning::CI Pipeline was cancelled."
          exit 0
        else
          echo "::notice::CI Pipeline completed successfully!"
          exit 0
        fi
