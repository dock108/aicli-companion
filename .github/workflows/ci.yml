name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  XCODE_VERSION: '15.0'

jobs:
  # Node.js Server Tests and Linting
  server:
    name: Server Tests & Lint
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check code formatting
      run: npm run format:check
    
    - name: Run tests
      run: npm test
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: server-coverage
        path: server/coverage/
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # iOS App Build and Tests
  ios:
    name: iOS Build & Test
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: |
        cd ios
        swiftlint lint --strict --reporter github-actions-logging
      continue-on-error: true
    
    - name: Build iOS App
      run: |
        cd ios
        swift build
    
    - name: Run iOS Tests
      run: |
        cd ios
        swift test
    
    - name: Build for Release
      run: |
        cd ios
        swift build -c release

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [server, ios]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Start server
      run: |
        cd server
        npm start &
        sleep 10
    
    - name: Health check
      run: |
        curl -f http://localhost:3001/health || exit 1
    
    - name: Run integration tests
      run: |
        cd server
        node test-websocket.js
      continue-on-error: true

  # Code Quality Report
  quality:
    name: Code Quality Report
    runs-on: ubuntu-latest
    needs: [server, ios]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
    
    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… All CI checks passed!'
          })
      continue-on-error: true