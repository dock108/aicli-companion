name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  XCODE_VERSION: '16.0'
  RUST_VERSION: 'stable'

jobs:
  # Node.js Server Tests and Linting
  server:
    name: Server Tests & Lint
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check code formatting
      run: npm run format:check
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: server-coverage
        path: server/coverage/
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # Host App Tests and Linting
  # hostapp:
  #   name: Host App Tests & Lint
  #   runs-on: ubuntu-latest
    
  #   defaults:
  #     run:
  #       working-directory: ./server/hostapp
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ env.NODE_VERSION }}
  #       cache: 'npm'
  #       cache-dependency-path: server/hostapp/package-lock.json
    
  #   - name: Install system dependencies for Tauri
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y \
  #         libwebkit2gtk-4.1-dev \
  #         build-essential \
  #         curl \
  #         wget \
  #         file \
  #         libssl-dev \
  #         libgtk-3-dev \
  #         libayatana-appindicator3-dev \
  #         librsvg2-dev
    
  #   - name: Setup Rust
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: ${{ env.RUST_VERSION }}
  #       profile: minimal
  #       override: true
  #       components: rustfmt, clippy
    
  #   - name: Install JavaScript dependencies
  #     run: npm ci
    
  #   - name: Run ESLint
  #     run: npm run lint
    
  #   - name: Run JavaScript tests with coverage
  #     run: npm run test:coverage
    
  #   - name: Upload JavaScript coverage reports
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: hostapp-js-coverage
  #       path: server/hostapp/coverage/
    
  #   - name: Run Rust formatting check
  #     run: |
  #       cd src-tauri
  #       cargo fmt --check
    
  #   - name: Run Rust linting
  #     run: |
  #       cd src-tauri
  #       cargo clippy -- -D warnings
    
  #   - name: Run Rust tests
  #     run: |
  #       cd src-tauri
  #       cargo test --verbose
    
  #   - name: Security audit for Node.js
  #     run: npm audit --audit-level=high
  #     continue-on-error: true
    
  #   - name: Security audit for Rust
  #     run: |
  #       cd src-tauri
  #       cargo audit
  #     continue-on-error: true

  # iOS App Build and Tests
  ios:
    name: iOS Build & Test
    permissions:
      contents: read
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: |
        cd ios
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Resolve Swift Package Dependencies
      run: |
        cd ios
        xcodebuild -resolvePackageDependencies -project AICLICompanion.xcodeproj -scheme AICLICompanionApp
    
    - name: Build iOS App
      run: |
        cd ios
        xcodebuild -project AICLICompanion.xcodeproj -scheme AICLICompanionApp -destination 'platform=iOS Simulator,name=iPhone 16 Pro' build CODE_SIGNING_ALLOWED=NO
    
    - name: Run iOS Tests with Coverage
      run: |
        cd ios
        xcodebuild -project AICLICompanion.xcodeproj -scheme AICLICompanionApp -destination 'platform=iOS Simulator,name=iPhone 16 Pro' test -enableCodeCoverage YES CODE_SIGNING_ALLOWED=NO
      continue-on-error: true
    
    - name: Generate iOS Coverage Report
      run: |
        cd ios
        xcrun xccov view --report --json DerivedData/Build/Logs/Test/*.xcresult > ios-coverage.json || true
        xcrun xccov view --report DerivedData/Build/Logs/Test/*.xcresult > ios-coverage.txt || true
      continue-on-error: true
    
    - name: Upload iOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: ios-coverage
        path: |
          ios/ios-coverage.json
          ios/ios-coverage.txt
      if: always()
    
    - name: Build for Release
      run: |
        cd ios
        xcodebuild -project AICLICompanion.xcodeproj -scheme AICLICompanionApp -configuration Release -destination 'generic/platform=iOS' -archivePath build/AICLICompanion.xcarchive archive CODE_SIGNING_ALLOWED=NO
      continue-on-error: true

  # macOS App Build and Tests
  macos:
    name: macOS Build & Test
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
    
    - name: Install XcodeGen
      run: brew install xcodegen
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Generate Xcode Project
      run: |
        cd macos-app
        xcodegen generate
    
    - name: Run SwiftLint
      run: |
        cd macos-app
        swiftlint lint --strict --reporter github-actions-logging
    
    - name: Build macOS App
      run: |
        cd macos-app
        xcodebuild -project ClaudeCompanionHost.xcodeproj -scheme ClaudeCompanionHost -destination 'platform=macOS' build CODE_SIGNING_ALLOWED=NO
    
    - name: Run macOS Tests with Coverage
      run: |
        cd macos-app
        xcodebuild -project ClaudeCompanionHost.xcodeproj -scheme ClaudeCompanionHost -destination 'platform=macOS' test -enableCodeCoverage YES CODE_SIGNING_ALLOWED=NO
      continue-on-error: true
    
    - name: Generate macOS Coverage Report
      run: |
        cd macos-app
        xcrun xccov view --report --json DerivedData/Build/Logs/Test/*.xcresult > macos-coverage.json || true
        xcrun xccov view --report DerivedData/Build/Logs/Test/*.xcresult > macos-coverage.txt || true
      continue-on-error: true
    
    - name: Upload macOS Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: macos-coverage
        path: |
          macos-app/macos-coverage.json
          macos-app/macos-coverage.txt
      if: always()
    
    - name: Build for Release
      run: |
        cd macos-app
        xcodebuild -project ClaudeCompanionHost.xcodeproj -scheme ClaudeCompanionHost -configuration Release -destination 'platform=macOS' build CODE_SIGNING_ALLOWED=NO
      continue-on-error: true

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [server, ios, macos]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Start server
      run: |
        cd server
        npm start &
        sleep 10
    
    - name: Health check
      run: |
        curl -f http://localhost:3001/health || exit 1
    
    - name: Run integration tests
      run: |
        cd server
        node manual-tests/test-websocket.js
      continue-on-error: true

  # Code Quality Report
  quality:
    name: Code Quality Report
    runs-on: ubuntu-latest
    needs: [server, ios, macos]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
    
    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… All CI checks passed!'
          })
      continue-on-error: true